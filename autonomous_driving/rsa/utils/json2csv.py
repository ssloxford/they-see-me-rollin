import argparse
import csv
import glob
import hashlib
import json
import os

# If a file already exists, this method checks if a specific simulation 
# has already been converted and added to the CSV. The identification is based
# on the MD5 hash of the simulation duration
def simulation_id_doesnt_exist(simulation_id, output_filepath):
    with open(output_filepath, "r") as output_file:
        for line in output_file:
            if simulation_id.hexdigest() in line:
                return False
    return True

# This method splits a filepath into path and file name
def get_path_and_name(filepath):
    file_path_splitted = filepath.split("/")
    file_name = file_path_splitted[len(file_path_splitted)-1]
    path = filepath[:len(filepath)-len(file_name)]
    return path, file_name[:len(file_name)-5]


# This method converts a JSON files, as it is generated by CALRA Leaderboard
# and converts it into a CSV file.
def convert_to_csv(input_filepath, output_filepath=None):
    if output_filepath is None:
        output_filepath = input_filepath.replace("json", "csv")

    if not os.path.exists(output_filepath):
        with open(output_filepath, 'w') as output_file:
            output_file.write("simulation_id,route_id,collisions_layout,collisions_pedestrian,collisions_vehicle,outside_route_lanes,red_light,route_dev,route_timeout,stop_infraction,vehicle_blocked,total_infractions,duration_game,duration_system,route_length,score_composed,score_penalty,score_route,status\n")

    with open(input_filepath, "r") as input_json:
        data = json.load(input_json)

        records = data["_checkpoint"]["records"]
        for record in records:

            route_id = record["route_id"]

            # Extract Number of Infractions

            infractions = record["infractions"]
            collisions_layout = len(infractions["collisions_layout"])
            collisions_pedestrian = len(infractions["collisions_pedestrian"])
            collisions_vehicle = len(infractions["collisions_vehicle"])
            outside_route_lanes = len(infractions["outside_route_lanes"])
            red_light = len(infractions["red_light"])
            route_dev = len(infractions["route_dev"])
            route_timeout = len(infractions["route_timeout"])
            stop_infraction = len(infractions["stop_infraction"])
            vehicle_blocked = len(infractions["vehicle_blocked"])
            total_infractions = sum([len(infractions[infraction]) for infraction in infractions])

            # Extract Meta Data

            meta = record["meta"]
            duration_game = meta["duration_game"]
            duration_system = meta["duration_system"]
            route_length = meta["route_length"]

            # Extract Scores

            scores = record["scores"]
            score_composed = scores["score_composed"]
            score_penalty = scores["score_penalty"]
            score_route = scores["score_route"]

            status = record["status"]

            simulation_id = hashlib.md5(str(duration_system).encode())

            if status != "Failed - Simulation crashed" and simulation_id_doesnt_exist(simulation_id, output_filepath):
                f = csv.writer(open(output_filepath, "a+"))
                f.writerow(
                    [simulation_id.hexdigest(), route_id, collisions_layout, collisions_pedestrian, collisions_vehicle,
                     outside_route_lanes, red_light, route_dev, route_timeout, stop_infraction, vehicle_blocked,
                     total_infractions, duration_game, duration_system, route_length, score_composed, score_penalty,
                     score_route, status])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Convert the results of the Carla Leaderboard from JSON into CSV.")
    parser.add_argument("-i", "--input_filepath", type=str, help="Path to the JSON file")
    parser.add_argument("-o", "--output_filepath", type=str, help='Path to the CSV file')
    parser.add_argument("-p", "--input_path", type=str, help="Path to folder with all JSON files")
    args = parser.parse_args()

    if args.input_path is None:
        convert_to_csv(args.input_filepath, args.output_filepath)
    else:
        files = glob.glob(f"{args.input_path}/*.json")
        print(files)
        for file in files:
            convert_to_csv(file)

